[
  {
    "title": "Data Aggregation Function",
    "description": "This pattern demonstrates how to perform calculations on a list of data. It's great for statistics, data analysis, and scoring systems.",
    "instructions": "Click in the middle area of the canvas to add a random new score between 60-100.",
    "code": "// Function to calculate the average of a list of numbers\nfunction calculateAverage(numbers) {\n  let sum = 0;\n  \n  // Add up all the numbers\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  \n  // Return the average (sum divided by count)\n  if (numbers.length > 0) {\n    return sum / numbers.length;\n  } else {\n    return 0; // Avoid division by zero\n  }\n}\n\n// Function to find the highest value in a list\nfunction findHighest(numbers) {\n  if (numbers.length === 0) {\n    return null; // Return null for empty list\n  }\n  \n  let highest = numbers[0]; // Start with the first number\n  \n  // Check each number to find the highest\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > highest) {\n      highest = numbers[i];\n    }\n  }\n  \n  return highest;\n}\n\n// Sample data: quiz scores\nlet quizScores = [85, 92, 78, 65, 88, 72];\n\nfunction setup() {\n  createCanvas(500, 400);\n}\n\nfunction draw() {\n  background(220);\n  \n  // Calculate statistics\n  let average = calculateAverage(quizScores);\n  let highest = findHighest(quizScores);\n  \n  // Display the data\n  textSize(18);\n  text(\"Quiz Score Analysis\", 20, 30);\n  \n  textSize(14);\n  text(\"Scores: \", 20, 60);\n  for (let i = 0; i < quizScores.length; i++) {\n    text(quizScores[i], 80 + i * 40, 60);\n  }\n  \n  text(\"Average score: \" + average.toFixed(1), 20, 90);\n  text(\"Highest score: \" + highest, 20, 120);\n  \n  // Visualize the data\n  for (let i = 0; i < quizScores.length; i++) {\n    // Draw bars representing scores\n    let barHeight = quizScores[i] * 2;\n    fill(0, 150, 255);\n    rect(50 + i * 70, 350 - barHeight, 50, barHeight);\n    \n    // Add score labels\n    fill(0);\n    text(quizScores[i], 65 + i * 70, 370);\n  }\n  \n  // Draw average line\n  stroke(255, 0, 0);\n  line(50, 350 - average * 2, 470, 350 - average * 2);\n  noStroke();\n  fill(255, 0, 0);\n  text(\"Average\", 20, 350 - average * 2);\n}\n\n// Add a new score when mouse is pressed\nfunction mousePressed() {\n  if (mouseY > 150 && mouseY < 300) {\n    // Add a random new score between 60 and 100\n    let newScore = floor(random(60, 101));\n    quizScores.push(newScore);\n    \n    // Keep only the last 6 scores if we have more\n    if (quizScores.length > 6) {\n      quizScores.shift(); // Remove the oldest score\n    }\n  }\n}",
    "questions": [
      "What does the calculateAverage function do and what does it return?",
      "How does the findHighest function determine which value is the highest?",
      "What would happen if you passed an empty array to these functions?",
      "How would you create a function to find the lowest value in the list?",
      "What happens when you click the mouse in the example program?"
    ]
  },
  {
    "title": "Search and Filter Function",
    "description": "This pattern shows how to find items in a list that match certain criteria. It's useful for search features, filtering data sets, and creating subsets.",
    "instructions": "Use the sliders to set min and max prices, and type in the search box to filter products by name.",
    "code": "// Function to search for products within a price range\nfunction findProductsInPriceRange(products, minPrice, maxPrice) {\n  let results = [];\n  \n  for (let i = 0; i < products.length; i++) {\n    let product = products[i];\n    \n    // Check if product price is within range\n    if (product.price >= minPrice && product.price <= maxPrice) {\n      results.push(product);\n    }\n  }\n  \n  return results;\n}\n\n// Function to search products by name\nfunction findProductsByName(products, searchTerm) {\n  let results = [];\n  searchTerm = searchTerm.toLowerCase(); // Case-insensitive search\n  \n  for (let i = 0; i < products.length; i++) {\n    let product = products[i];\n    \n    // Check if product name contains the search term\n    if (product.name.toLowerCase().includes(searchTerm)) {\n      results.push(product);\n    }\n  }\n  \n  return results;\n}\n\n// Sample product data\nlet productList = [\n  { name: \"Laptop\", price: 899, category: \"Electronics\" },\n  { name: \"Smartphone\", price: 499, category: \"Electronics\" },\n  { name: \"Headphones\", price: 149, category: \"Electronics\" },\n  { name: \"Desk Chair\", price: 249, category: \"Furniture\" },\n  { name: \"Coffee Table\", price: 189, category: \"Furniture\" },\n  { name: \"Blender\", price: 79, category: \"Kitchen\" },\n  { name: \"Microwave\", price: 129, category: \"Kitchen\" }\n];\n\nlet minPriceSlider, maxPriceSlider, searchInput, searchButton;\nlet filteredProducts = [];\n\nfunction setup() {\n  createCanvas(600, 400);\n  \n  // Create UI elements\n  minPriceSlider = createSlider(0, 1000, 0);\n  minPriceSlider.position(120, 50);\n  \n  maxPriceSlider = createSlider(0, 1000, 1000);\n  maxPriceSlider.position(120, 80);\n  \n  searchInput = createInput();\n  searchInput.position(120, 110);\n  searchInput.size(150);\n  \n  searchButton = createButton('Search');\n  searchButton.position(280, 110);\n  searchButton.mousePressed(performSearch);\n  \n  // Initial search results\n  filteredProducts = productList;\n}\n\nfunction draw() {\n  background(220);\n  \n  // Display UI labels\n  text(\"Product Search\", 20, 30);\n  text(\"Min Price: $\" + minPriceSlider.value(), 20, 65);\n  text(\"Max Price: $\" + maxPriceSlider.value(), 20, 95);\n  text(\"Search Name:\", 20, 125);\n  \n  // Display search results\n  text(\"Results:\", 20, 160);\n  \n  // Display product list\n  for (let i = 0; i < filteredProducts.length; i++) {\n    let product = filteredProducts[i];\n    text(product.name + \" - $\" + product.price + \" (\" + product.category + \")\", \n         40, 190 + i * 30);\n  }\n  \n  if (filteredProducts.length === 0) {\n    text(\"No products match your search criteria.\", 40, 190);\n  }\n}\n\nfunction performSearch() {\n  // Get search parameters\n  let minPrice = minPriceSlider.value();\n  let maxPrice = maxPriceSlider.value();\n  let searchTerm = searchInput.value();\n  \n  // First filter by price\n  filteredProducts = findProductsInPriceRange(productList, minPrice, maxPrice);\n  \n  // Then filter by name if search term is provided\n  if (searchTerm.trim() !== \"\") {\n    filteredProducts = findProductsByName(filteredProducts, searchTerm);\n  }\n}",
    "questions": [
      "What does the findProductsInPriceRange function do?",
      "How does the findProductsByName function make the search case-insensitive?",
      "Why does the code use two separate filter functions instead of one combined function?",
      "What would happen if no products matched the search criteria?",
      "How would you modify the search to also filter by product category?"
    ]
  },
  {
    "title": "State Machine",
    "description": "This pattern manages different states in your application, controlling what happens in each state and how transitions occur between states.",
    "instructions": "Click on the canvas to change the game state from START to PLAYING to GAMEOVER and back to START.",
    "code": "// Game state constants\nconst START = 0;\nconst PLAYING = 1;\nconst GAMEOVER = 2;\n\n// Current game state\nlet gameState = START;\n\n// Game variables\nlet score = 0;\nlet timer = 30;\nlet lastTimerUpdate = 0;\n\nfunction setup() {\n  createCanvas(500, 400);\n  textAlign(CENTER, CENTER);\n  lastTimerUpdate = millis();\n}\n\nfunction draw() {\n  background(220);\n  \n  // Handle different states\n  switch(gameState) {\n    case START:\n      drawStartScreen();\n      break;\n    case PLAYING:\n      updateGame();\n      drawGameScreen();\n      break;\n    case GAMEOVER:\n      drawGameOverScreen();\n      break;\n  }\n}\n\nfunction drawStartScreen() {\n  background(100, 180, 240);\n  \n  fill(255);\n  textSize(36);\n  text(\"CLICK TO START\", width/2, height/2 - 20);\n  \n  textSize(18);\n  text(\"Click quickly to score points before time runs out!\", width/2, height/2 + 30);\n}\n\nfunction updateGame() {\n  // Update timer\n  let currentTime = millis();\n  if (currentTime - lastTimerUpdate >= 1000) { // 1 second passed\n    timer--;\n    lastTimerUpdate = currentTime;\n    \n    // Check if time is up\n    if (timer <= 0) {\n      gameState = GAMEOVER;\n    }\n  }\n}\n\nfunction drawGameScreen() {\n  background(180, 240, 180);\n  \n  // Draw score and timer\n  fill(0);\n  textSize(24);\n  text(\"Score: \" + score, width/2, 50);\n  text(\"Time: \" + timer, width/2, 90);\n  \n  // Draw target\n  fill(255, 0, 0);\n  ellipse(width/2, height/2, 100, 100);\n  fill(255);\n  text(\"CLICK!\", width/2, height/2);\n}\n\nfunction drawGameOverScreen() {\n  background(240, 180, 180);\n  \n  fill(255);\n  textSize(36);\n  text(\"GAME OVER\", width/2, height/2 - 40);\n  \n  textSize(24);\n  text(\"Final Score: \" + score, width/2, height/2 + 10);\n  \n  textSize(18);\n  text(\"Click to play again\", width/2, height/2 + 60);\n}\n\nfunction mousePressed() {\n  switch(gameState) {\n    case START:\n      // Start the game\n      gameState = PLAYING;\n      score = 0;\n      timer = 30;\n      lastTimerUpdate = millis();\n      break;\n      \n    case PLAYING:\n      // Increase score when clicking\n      score += 1;\n      break;\n      \n    case GAMEOVER:\n      // Return to start screen\n      gameState = START;\n      break;\n  }\n}",
    "questions": [
      "What is a state machine and why would you use one in a game?",
      "How many states are in this program and what does each one represent?",
      "How does the program transition between different states?",
      "What happens when the timer reaches zero?",
      "How would you add a new PAUSE state to this game?"
    ]
  }
]
